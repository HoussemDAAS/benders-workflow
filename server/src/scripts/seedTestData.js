const { getDatabase } = require('../config/database');
const { v4: uuidv4 } = require('uuid');

async function seedTestData() {
  const db = getDatabase();
  
  try {
    console.log('üå± Starting database seeding...');
    
    // Clear existing data
    console.log('üßπ Clearing existing data...');
    const clearQueries = [
      'DELETE FROM step_assignments',
      'DELETE FROM task_assignments',
      'DELETE FROM kanban_tasks',
      'DELETE FROM kanban_columns',
      'DELETE FROM workflow_steps',
      'DELETE FROM client_meetings',
      'DELETE FROM workflows',
      'DELETE FROM team_members',
      'DELETE FROM clients',
      'DELETE FROM activity_log'
    ];
    
    for (const query of clearQueries) {
      try {
        await db.run(query);
      } catch (error) {
        // Ignore errors for tables that might not exist yet
        console.log(`Note: ${query} - ${error.message}`);
      }
    }
    
    // Seed Clients
    console.log('üë• Seeding clients...');
    const clientsData = [
      {
        id: uuidv4(),
        name: 'John Smith',
        company: 'TechCorp Solutions',
        email: 'john.smith@techcorp.com',
        phone: '+1-555-0123',
        isActive: true
      },
      {
        id: uuidv4(),
        name: 'Sarah Johnson',
        company: 'Digital Innovations Ltd',
        email: 'sarah.j@digitalinnovations.com',
        phone: '+1-555-0456',
        isActive: true
      },
      {
        id: uuidv4(),
        name: 'Michael Chen',
        company: 'StartupHub Inc',
        email: 'm.chen@startuphub.io',
        phone: '+1-555-0789',
        isActive: true
      },
      {
        id: uuidv4(),
        name: 'Emily Rodriguez',
        company: 'Global Enterprises',
        email: 'e.rodriguez@globalent.com',
        phone: '+1-555-0321',
        isActive: false
      }
    ];
    
    for (const client of clientsData) {
      await db.run(`
        INSERT INTO clients (id, name, company, email, phone, is_active, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
      `, [client.id, client.name, client.company, client.email, client.phone, client.isActive ? 1 : 0]);
    }
    
    // Seed Team Members
    console.log('üë®‚Äçüíª Seeding team members...');
    const teamMembersData = [
      {
        id: uuidv4(),
        name: 'Alex Thompson',
        email: 'alex.thompson@company.com',
        role: 'Project Manager',
        skills: ['Project Management', 'Agile', 'Leadership'],
        isActive: true
      },
      {
        id: uuidv4(),
        name: 'Jessica Lee',
        email: 'jessica.lee@company.com',
        role: 'Senior Developer',
        skills: ['React', 'Node.js', 'TypeScript', 'Database Design'],
        isActive: true
      },
      {
        id: uuidv4(),
        name: 'David Wilson',
        email: 'david.wilson@company.com',
        role: 'UI/UX Designer',
        skills: ['Figma', 'UI Design', 'User Research', 'Prototyping'],
        isActive: true
      },
      {
        id: uuidv4(),
        name: 'Maria Garcia',
        email: 'maria.garcia@company.com',
        role: 'Quality Assurance',
        skills: ['Testing', 'Automation', 'Bug Tracking'],
        isActive: true
      },
      {
        id: uuidv4(),
        name: 'Tom Brown',
        email: 'tom.brown@company.com',
        role: 'DevOps Engineer',
        skills: ['Docker', 'AWS', 'CI/CD', 'Monitoring'],
        isActive: false
      }
    ];
    
    for (const member of teamMembersData) {
      await db.run(`
        INSERT INTO team_members (id, name, email, role, skills, is_active, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
      `, [member.id, member.name, member.email, member.role, JSON.stringify(member.skills), member.isActive ? 1 : 0]);
    }
    
    // Seed Workflows
    console.log('üîÑ Seeding workflows...');
    const workflowsData = [
      {
        id: uuidv4(),
        name: 'E-commerce Platform Development',
        description: 'Complete e-commerce platform with payment integration and admin dashboard',
        clientId: clientsData[0].id,
        status: 'active',
        startDate: new Date('2024-01-15').toISOString(),
        expectedEndDate: new Date('2024-06-15').toISOString(),
        actualEndDate: null,
        isAutoGenerated: true
      },
      {
        id: uuidv4(),
        name: 'Mobile App Redesign',
        description: 'Complete UI/UX redesign of the mobile application with new features',
        clientId: clientsData[1].id,
        status: 'active',
        startDate: new Date('2024-02-01').toISOString(),
        expectedEndDate: new Date('2024-05-01').toISOString(),
        actualEndDate: null,
        isAutoGenerated: true
      },
      {
        id: uuidv4(),
        name: 'Website Migration',
        description: 'Migration from legacy system to modern tech stack',
        clientId: clientsData[2].id,
        status: 'completed',
        startDate: new Date('2023-11-01').toISOString(),
        expectedEndDate: new Date('2024-02-01').toISOString(),
        actualEndDate: new Date('2024-01-28').toISOString(),
        isAutoGenerated: false
      },
      {
        id: uuidv4(),
        name: 'Data Analytics Dashboard',
        description: 'Business intelligence dashboard with real-time data visualization',
        clientId: clientsData[0].id,
        status: 'paused',
        startDate: new Date('2024-03-01').toISOString(),
        expectedEndDate: new Date('2024-07-01').toISOString(),
        actualEndDate: null,
        isAutoGenerated: false
      }
    ];
    
    for (const workflow of workflowsData) {
      await db.run(`
        INSERT INTO workflows (id, name, description, client_id, status, start_date, expected_end_date, actual_end_date, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
      `, [workflow.id, workflow.name, workflow.description, workflow.clientId, workflow.status, workflow.startDate, workflow.expectedEndDate, workflow.actualEndDate]);
    }
    
    // Seed Kanban Columns
    console.log('üìã Seeding kanban columns...');
    const columnsData = [
      { id: 'todo', title: 'To Do', color: '#64748b', order_index: 1 },
      { id: 'in-progress', title: 'In Progress', color: '#3b82f6', order_index: 2 },
      { id: 'review', title: 'Review', color: '#f59e0b', order_index: 3 },
      { id: 'done', title: 'Done', color: '#10b981', order_index: 4 }
    ];
    
    for (const column of columnsData) {
      await db.run(`
        INSERT OR REPLACE INTO kanban_columns (id, title, color, order_index, created_at, updated_at)
        VALUES (?, ?, ?, ?, datetime('now'), datetime('now'))
      `, [column.id, column.title, column.color, column.order_index]);
    }

    // Seed Kanban Tasks
    console.log('üìù Seeding kanban tasks...');
    const kanbanTasksData = [
      {
        id: uuidv4(),
        title: 'Setup user authentication system',
        description: 'Implement JWT-based authentication with login/logout functionality',
        workflowId: workflowsData[0].id,
        stepId: null,
        status: 'in-progress',
        priority: 'high',
        tags: ['authentication', 'security', 'backend'],
        dueDate: new Date('2024-04-15').toISOString(),
        assignedMembers: [teamMembersData[1].id]
      },
      {
        id: uuidv4(),
        title: 'Design product catalog page',
        description: 'Create responsive product catalog with filtering and search',
        workflowId: workflowsData[0].id,
        stepId: null,
        status: 'todo',
        priority: 'medium',
        tags: ['frontend', 'ui', 'catalog'],
        dueDate: new Date('2024-04-20').toISOString(),
        assignedMembers: [teamMembersData[2].id]
      },
      {
        id: uuidv4(),
        title: 'Implement shopping cart functionality',
        description: 'Add/remove items, calculate totals, persist cart state',
        workflowId: workflowsData[0].id,
        stepId: null,
        status: 'review',
        priority: 'high',
        tags: ['frontend', 'cart', 'state-management'],
        dueDate: new Date('2024-04-10').toISOString(),
        assignedMembers: [teamMembersData[1].id, teamMembersData[2].id]
      },
      {
        id: uuidv4(),
        title: 'Database schema optimization',
        description: 'Optimize database queries and add proper indexing',
        workflowId: workflowsData[0].id,
        stepId: null,
        status: 'done',
        priority: 'medium',
        tags: ['database', 'performance', 'optimization'],
        dueDate: new Date('2024-03-30').toISOString(),
        assignedMembers: [teamMembersData[1].id]
      },
      {
        id: uuidv4(),
        title: 'User persona development',
        description: 'Create detailed user personas based on research findings',
        workflowId: workflowsData[1].id,
        stepId: null,
        status: 'done',
        priority: 'high',
        tags: ['research', 'personas', 'ux'],
        dueDate: new Date('2024-03-15').toISOString(),
        assignedMembers: [teamMembersData[2].id]
      },
      {
        id: uuidv4(),
        title: 'Navigation redesign',
        description: 'Redesign app navigation based on user feedback',
        workflowId: workflowsData[1].id,
        stepId: null,
        status: 'in-progress',
        priority: 'high',
        tags: ['navigation', 'ui', 'redesign'],
        dueDate: new Date('2024-04-25').toISOString(),
        assignedMembers: [teamMembersData[2].id]
      },
      {
        id: uuidv4(),
        title: 'Accessibility audit',
        description: 'Conduct comprehensive accessibility audit and implement fixes',
        workflowId: workflowsData[1].id,
        stepId: null,
        status: 'todo',
        priority: 'medium',
        tags: ['accessibility', 'audit', 'compliance'],
        dueDate: new Date('2024-05-01').toISOString(),
        assignedMembers: [teamMembersData[3].id]
      },
      {
        id: uuidv4(),
        title: 'Performance monitoring setup',
        description: 'Setup monitoring and alerting for application performance',
        workflowId: workflowsData[2].id,
        stepId: null,
        status: 'done',
        priority: 'low',
        tags: ['monitoring', 'performance', 'devops'],
        dueDate: new Date('2024-01-20').toISOString(),
        assignedMembers: [teamMembersData[4].id]
      }
    ];
    
    for (const task of kanbanTasksData) {
      await db.run(`
        INSERT INTO kanban_tasks (id, title, description, workflow_id, step_id, status, priority, tags, due_date, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
      `, [task.id, task.title, task.description, task.workflowId, task.stepId, task.status, task.priority, JSON.stringify(task.tags), task.dueDate]);
    }
    
    // Seed Client Meetings
    console.log('üìÖ Seeding client meetings...');
    const meetingsData = [
      {
        id: uuidv4(),
        clientId: clientsData[0].id,
        title: 'Project Kickoff Meeting',
        description: 'Initial project discussion and requirements gathering',
        meeting_date: new Date('2024-01-20T10:00:00Z').toISOString(),
        duration_minutes: 120,
        status: 'completed',
        meeting_type: 'in-person',
        notes: 'Discussed project scope, timeline, and initial requirements. Client provided detailed business requirements document.'
      },
      {
        id: uuidv4(),
        clientId: clientsData[0].id,
        title: 'Weekly Progress Review',
        description: 'Weekly progress update and demo of completed features',
        meeting_date: new Date('2024-04-12T14:00:00Z').toISOString(),
        duration_minutes: 60,
        status: 'scheduled',
        meeting_type: 'video',
        notes: null
      },
      {
        id: uuidv4(),
        clientId: clientsData[1].id,
        title: 'Design Review Session',
        description: 'Review and feedback session for new mobile app designs',
        meeting_date: new Date('2024-04-08T11:00:00Z').toISOString(),
        duration_minutes: 90,
        status: 'completed',
        meeting_type: 'video',
        notes: 'Client approved 90% of designs. Requested minor changes to color scheme and typography.'
      },
      {
        id: uuidv4(),
        clientId: clientsData[2].id,
        title: 'Project Completion Meeting',
        description: 'Final project handover and documentation review',
        meeting_date: new Date('2024-01-30T15:00:00Z').toISOString(),
        duration_minutes: 60,
        status: 'completed',
        meeting_type: 'in-person',
        notes: 'Successfully completed project handover. All deliverables approved by client.'
      }
    ];
    
    for (const meeting of meetingsData) {
      await db.run(`
        INSERT INTO client_meetings (id, client_id, title, description, meeting_date, duration_minutes, status, meeting_type, notes, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
      `, [meeting.id, meeting.clientId, meeting.title, meeting.description, meeting.meeting_date, meeting.duration_minutes, meeting.status, meeting.meeting_type, meeting.notes]);
    }
    
    // Seed Task Assignments
    console.log('üîó Seeding task assignments...');
    for (const task of kanbanTasksData) {
      for (const memberId of task.assignedMembers) {
        await db.run(`
          INSERT INTO task_assignments (id, task_id, member_id, created_at)
          VALUES (?, ?, ?, datetime('now'))
        `, [uuidv4(), task.id, memberId]);
      }
    }
    
    // Seed Activity Logs
    console.log('üìä Seeding activity logs...');
    const activityLogsData = [
      {
        id: uuidv4(),
        entityType: 'workflow',
        entityId: workflowsData[0].id,
        action: 'created',
        description: 'Workflow "E-commerce Platform Development" was created',
        performedBy: teamMembersData[0].id,
        timestamp: new Date('2024-01-15T09:00:00Z').toISOString()
      },
      {
        id: uuidv4(),
        entityType: 'task',
        entityId: kanbanTasksData[0].id,
        action: 'created',
        description: 'Task "Setup user authentication system" was created',
        performedBy: teamMembersData[1].id,
        timestamp: new Date('2024-02-01T10:30:00Z').toISOString()
      },
      {
        id: uuidv4(),
        entityType: 'task',
        entityId: kanbanTasksData[2].id,
        action: 'status_changed',
        description: 'Task status changed from "in-progress" to "review"',
        performedBy: teamMembersData[1].id,
        timestamp: new Date('2024-04-05T16:45:00Z').toISOString()
      },
      {
        id: uuidv4(),
        entityType: 'task',
        entityId: kanbanTasksData[3].id,
        action: 'completed',
        description: 'Task "Database schema optimization" was completed',
        performedBy: teamMembersData[1].id,
        timestamp: new Date('2024-03-30T14:20:00Z').toISOString()
      },
      {
        id: uuidv4(),
        entityType: 'meeting',
        entityId: meetingsData[2].id,
        action: 'completed',
        description: 'Meeting "Design Review Session" was completed',
        performedBy: teamMembersData[0].id,
        timestamp: new Date('2024-04-08T12:30:00Z').toISOString()
      }
    ];
    
    for (const log of activityLogsData) {
      await db.run(`
        INSERT INTO activity_log (id, entity_type, entity_id, action, details, performed_by, created_at)
        VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
      `, [log.id, log.entityType, log.entityId, log.action, log.description, log.performedBy]);
    }
    
    console.log('‚úÖ Database seeding completed successfully!');
    console.log(`üìä Seeded data summary:`);
    console.log(`   ‚Ä¢ ${clientsData.length} clients`);
    console.log(`   ‚Ä¢ ${teamMembersData.length} team members`);
    console.log(`   ‚Ä¢ ${workflowsData.length} workflows`);
    console.log(`   ‚Ä¢ ${kanbanTasksData.length} kanban tasks`);
    console.log(`   ‚Ä¢ ${meetingsData.length} client meetings`);
    console.log(`   ‚Ä¢ ${activityLogsData.length} activity logs`);
    
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    throw error;
  }
}

module.exports = { seedTestData };

// Run seeding if this file is executed directly
if (require.main === module) {
  const { createTables } = require('./initDatabase');
  
  async function runSeeding() {
    try {
      console.log('üîß Ensuring database tables exist...');
      await createTables();
      await seedTestData();
      process.exit(0);
    } catch (error) {
      console.error('‚ùå Failed to seed database:', error);
      process.exit(1);
    }
  }
  
  runSeeding();
} 